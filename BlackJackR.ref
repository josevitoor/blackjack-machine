REFINEMENT BlackJackR
REFINES BlackJack

VARIABLES
  players_r, 
  players_counter,
  table_r,
  table_counter,
  deck_r,
  player_bet_r,
  player_balance_r,
  player_cards_r,
  bankers_r,
  stand_r,
  stand_counter,
  winners_r,
  winners_counter,
  banker_ace_r,
  player_ace_r

INVARIANT
    players_r : 0..max_players --> USER
    & players_counter : 0..max_players
    & players = ran(0..players_counter <| players_r)
    & card(players) = players_counter
    
    & table_r : 0..6 --> USER
    & table_counter : 0..6
    & table = (0..6) <| table_r
    & size(table) = table_counter
    
    & deck_r : 0..51 >->> SUIT * RANK
    & deck = (0..51) <| deck_r
    
    & player_bet_r : USER --> 0..2*max_balance
    & player_bet = player_bet_r
    
    & player_balance_r : USER --> 0..2*max_balance
    & balance = player_balance_r
    
    & player_cards_r : 0..max_players --> (0..11 >->> SUIT * RANK)
    
    & bankers_r : 0..0 --> USER
    & bankers = ran(0..0 <| bankers_r)
    
    & banker_ace_r : ACE
    & banker_ace = banker_ace_r
    
    & player_ace_r: USER +-> ACE
    & player_ace = player_ace_r 
    
    & stand_r : 0..max_players+1 --> USER
    & stand_counter : 0..max_players+1
    & stand = ran(0..stand_counter <| stand_r)
    & card(stand) = stand_counter
    
    & winners_r: 0..max_players+1 --> USER
    & winners_counter : 0..table_counter
    & winners = (0..winners_counter) <| winners_r
    & size(winners) = winners_counter

INITIALISATION 
    players_r := (0..max_players) * {};
    players_counter := 0;
    table_r := (0..6) * {};
    table_counter := 0;
    deck_r := (0..51) * {};
    player_bet_r := USER * {0};
    player_balance_r := USER * {0};
    player_cards_r := (0..max_players) * {(0..11)*{}};
    bankers_r := (0..0) * {};
    banker_ace_r := no;
    stand_r := (0..max_players+1) * {};
    stand_counter := 0;
    winners_r := (0..max_players+1) * {};
    winners_counter := 0;
    player_ace_r := {}
    
OPERATIONS
    
add_player(player) =
    BEGIN
        players_r(players_counter) := player;
        players_counter := players_counter + 1;
        player_balance_r(player) := 0;
        player_bet_r(player) := 0 
        // player_cards := player_cards \/ { player |-> {} } 
    END;
    
remove_player(player) =
    BEGIN
        players_r(players_r~(player)) := players_r(players_counter);
        players_counter := players_counter -1;
        player_balance_r := {player} <<| player_balance_r;
        player_bet_r := {player} <<|  player_bet_r
        //player_cards := {player} <<|  player_cards
    END;

add_balance(player, amount) =
    player_balance_r(player) := player_balance_r(player) + amount;
    
remove_balance(player, amount) =
    player_balance_r(player) := player_balance_r(player) - amount;
    
initialize_table_with_banker(banker) =
    BEGIN   
        bankers_r(0) := banker;
        banker_ace_r := no
    END;
    /*
     * bankers := {banker} 
     * || table := table ^ [banker]
     * || banker_ace := no
     * || banker_cards := banker_cards \/ { banker |-> {} } 
     * || user_card_values := user_card_values <+ {banker |-> 0}
     */

enter_table(player) =
    BEGIN
       table_counter := table_counter + 1;
       table_r(table_counter) := player;
       player_ace_r := player_ace_r <+ {player |-> no} 
       /*
       table := table ^ [player] 
      || player_ace := player_ace <+ {player |-> no} 
      || user_card_values := user_card_values <+ {player |-> 0}
      */
    END;

exit_table(index) = 
    BEGIN
       table_r(index) := table_r(table_counter);
       table_counter := table_counter - 1
    END;
    /*
     PRE index : NAT1 & index > 1 & index <= size(table) & table(index) : players & player_bet(table(index)) = 0 & table(index) /: playing
   THEN table := (table /|\ index-1) ^ (table \|/ index)
      || player_ace  := {table(index)} <<|  player_ace 
      || stand := stand - {table(index)}
      || user_card_values := {table(index)} <<|  user_card_values
   END;
   */

bet(player, amount) =
    BEGIN
        player_balance_r(player) := player_balance_r(player) - amount;
        player_bet_r(player) := player_bet_r(player) + amount
    END;
    /*
     player_bet := player_bet  <+ {player |-> amount}  
      || balance := balance  <+ {player |-> balance(player) - amount}
    */

deal_initial_player_cards(index) = 
    skip;

deal_initial_banker_cards = 
    skip;
    
hit_player(player) =
    skip;

hit_banker(banker) =
    skip;
    
stand_player(player) =
    BEGIN
        stand_r(stand_counter) := player;
        stand_counter := stand_counter + 1
    END;
    /*
     PRE player : USER & player : players & player: ran(table) & card(player_cards(player)) >= 2 & player /: stand & banker_cards(table(1)) /= {}
     THEN stand := stand \/ {player}
     END;

    */

stand_banker(banker) =
     BEGIN
        stand_r(stand_counter) := banker;
        stand_counter := stand_counter + 1
     END;
    /*
    PRE banker : USER & banker: bankers & card(banker_cards(banker)) >= 2 & banker /: stand & user_card_values(banker) >= 17
    THEN stand := stand \/ {banker}
    END;
    */

check_player_result(index, banker) = 
    skip;

end_game(banker) =
    BEGIN
        banker_ace_r := no;
        stand_r := (0..max_players+1) * {};
        stand_counter := 0
    END;
    /*
    THEN banker_cards(banker) := {}
      || banker_ace := no
      || user_card_values(banker) := 0
      || stand := {}
      || playing := {}
   END;
   */

shuffle_deck =
    skip;

ww <-- show_winners = 
    skip;

ll <-- show_losers = 
    skip

END
